<assembly name="c:\code\FSharp.Data.SqlClient\src\SqlClient.Tests\bin\Release\net461\SqlClient.Tests.dll" run-date="2018-11-04" run-time="12:16:09" configFile="c:\code\FSharp.Data.SqlClient\src\SqlClient.Tests\bin\Release\net461\SqlClient.Tests.dll.config" time="2.944" total="144" passed="140" failed="0" skipped="4" environment="64-bit .NET 4.0.30319.42000" test-framework="xUnit.net 1.9.2.1705"><class time="1.187" name="FSharp.Data.DataTablesTests" total="24" passed="24" failed="0" skipped="0"><test name="FSharp.Data.DataTablesTests.AddRowAndBulkCopyWithConnOverride" type="FSharp.Data.DataTablesTests" method="AddRowAndBulkCopyWithConnOverride" result="Pass" time="0.710" /><test name="FSharp.Data.DataTablesTests.can build arbitrary table and columns exist" type="FSharp.Data.DataTablesTests" method="can build arbitrary table and columns exist" result="Pass" time="0.003" /><test name="FSharp.Data.DataTablesTests.NullableDateTimeColumn" type="FSharp.Data.DataTablesTests" method="NullableDateTimeColumn" result="Pass" time="0.078" /><test name="FSharp.Data.DataTablesTests.can't update on arbitrarilly constructed table" type="FSharp.Data.DataTablesTests" method="can't update on arbitrarilly constructed table" result="Pass" time="0.007" /><test name="FSharp.Data.DataTablesTests.TableTypeTag" type="FSharp.Data.DataTablesTests" method="TableTypeTag" result="Pass" time="0.003" /><test name="FSharp.Data.DataTablesTests.SqlCommandTableInsert" type="FSharp.Data.DataTablesTests" method="SqlCommandTableInsert" result="Pass" time="0.074" /><test name="FSharp.Data.DataTablesTests.ContinueUpdateOnErrorFalse" type="FSharp.Data.DataTablesTests" method="ContinueUpdateOnErrorFalse" result="Pass" time="0.037" /><test name="FSharp.Data.DataTablesTests.DEFAULTConstraint" type="FSharp.Data.DataTablesTests" method="DEFAULTConstraint" result="Pass" time="0.014" /><test name="FSharp.Data.DataTablesTests.NewRowAndBulkCopyWithTrsansactionScope" type="FSharp.Data.DataTablesTests" method="NewRowAndBulkCopyWithTrsansactionScope" result="Pass" time="0.078" /><test name="FSharp.Data.DataTablesTests.Can use datacolumns on SqlProgrammabilityProvider" type="FSharp.Data.DataTablesTests" method="Can use datacolumns on SqlProgrammabilityProvider" result="Pass" time="0.005" /><test name="FSharp.Data.DataTablesTests.AddRowAndBulkCopy" type="FSharp.Data.DataTablesTests" method="AddRowAndBulkCopy" result="Pass" time="0.021" /><test name="FSharp.Data.DataTablesTests.SqlCommandTableUpdate" type="FSharp.Data.DataTablesTests" method="SqlCommandTableUpdate" result="Pass" time="0.011" /><test name="FSharp.Data.DataTablesTests.ColumnWithSpaceInNameAndDefaultValue" type="FSharp.Data.DataTablesTests" method="ColumnWithSpaceInNameAndDefaultValue" result="Pass" time="0.034" /><test name="FSharp.Data.DataTablesTests.ContinueUpdateOnErrorTrue" type="FSharp.Data.DataTablesTests" method="ContinueUpdateOnErrorTrue" result="Pass" time="0.008" /><test name="FSharp.Data.DataTablesTests.Can use Table property on SqlCommandProvider's rows" type="FSharp.Data.DataTablesTests" method="Can use Table property on SqlCommandProvider's rows" result="Pass" time="0.009" /><test name="FSharp.Data.DataTablesTests.Can use Table type when ResultType = ResultType.DataTable" type="FSharp.Data.DataTablesTests" method="Can use Table type when ResultType = ResultType.DataTable" result="Pass" time="0.007" /><test name="FSharp.Data.DataTablesTests.DEFAULTConstraintInsertViaSqlDataAdapter" type="FSharp.Data.DataTablesTests" method="DEFAULTConstraintInsertViaSqlDataAdapter" result="Pass" time="0.029" /><test name="FSharp.Data.DataTablesTests.Can use Table property on SqlProgrammabilityProvider's rows" type="FSharp.Data.DataTablesTests" method="Can use Table property on SqlProgrammabilityProvider's rows" result="Pass" time="0.003" /><test name="FSharp.Data.DataTablesTests.can build arbitrary data table from inline sql" type="FSharp.Data.DataTablesTests" method="can build arbitrary data table from inline sql" result="Pass" time="0.004" /><test name="FSharp.Data.DataTablesTests.Can use DataColumnCollection" type="FSharp.Data.DataTablesTests" method="Can use DataColumnCollection" result="Pass" time="0.007" /><test name="FSharp.Data.DataTablesTests.Can use datacolumns and access like a normal DataRow" type="FSharp.Data.DataTablesTests" method="Can use datacolumns and access like a normal DataRow" result="Pass" time="0.007" /><test name="FSharp.Data.DataTablesTests.NewRowAndBulkCopy" type="FSharp.Data.DataTablesTests" method="NewRowAndBulkCopy" result="Pass" time="0.009" /><test name="FSharp.Data.DataTablesTests.Can use datacolumns GetValue and SetValue methods" type="FSharp.Data.DataTablesTests" method="Can use datacolumns GetValue and SetValue methods" result="Pass" time="0.009" /><test name="FSharp.Data.DataTablesTests.UpdatesPlusAmbientTransaction" type="FSharp.Data.DataTablesTests" method="UpdatesPlusAmbientTransaction" result="Pass" time="0.020" /></class><class time="0.049" name="FSharp.Data.TempTableTests" total="3" passed="3" failed="0" skipped="0"><test name="FSharp.Data.TempTableTests.queryWithHash" type="FSharp.Data.TempTableTests" method="queryWithHash" result="Pass" time="0.008" /><test name="FSharp.Data.TempTableTests.usingTempTable" type="FSharp.Data.TempTableTests" method="usingTempTable" result="Pass" time="0.034" /><test name="FSharp.Data.TempTableTests.queryWithHashAndTempTable" type="FSharp.Data.TempTableTests" method="queryWithHashAndTempTable" result="Pass" time="0.007" /></class><class time="0.093" name="FSharp.Data.UnitsOfMeasure" total="5" passed="5" failed="0" skipped="0"><test name="FSharp.Data.UnitsOfMeasure.WithParam" type="FSharp.Data.UnitsOfMeasure" method="WithParam" result="Pass" time="0.034" /><test name="FSharp.Data.UnitsOfMeasure.Datatable" type="FSharp.Data.UnitsOfMeasure" method="Datatable" result="Pass" time="0.019" /><test name="FSharp.Data.UnitsOfMeasure.FunctionDirect" type="FSharp.Data.UnitsOfMeasure" method="FunctionDirect" result="Pass" time="0.020" /><test name="FSharp.Data.UnitsOfMeasure.SingleOutput" type="FSharp.Data.UnitsOfMeasure" method="SingleOutput" result="Pass" time="0.005" /><test name="FSharp.Data.UnitsOfMeasure.FunctionInQuery" type="FSharp.Data.UnitsOfMeasure" method="FunctionInQuery" result="Pass" time="0.015" /></class><class time="0.267" name="FSharp.Data.CreateCommandTest" total="13" passed="13" failed="0" skipped="0"><test name="FSharp.Data.CreateCommandTest.ConditionalQuery" type="FSharp.Data.CreateCommandTest" method="ConditionalQuery" result="Pass" time="0.006" /><test name="FSharp.Data.CreateCommandTest.datatableAndDataReader" type="FSharp.Data.CreateCommandTest" method="datatableAndDataReader" result="Pass" time="0.018" /><test name="FSharp.Data.CreateCommandTest.columnsShouldNotBeNull2" type="FSharp.Data.CreateCommandTest" method="columnsShouldNotBeNull2" result="Pass" time="0.026" /><test name="FSharp.Data.CreateCommandTest.toTraceString" type="FSharp.Data.CreateCommandTest" method="toTraceString" result="Pass" time="0.066" /><test name="FSharp.Data.CreateCommandTest.getSingleRowNoParams" type="FSharp.Data.CreateCommandTest" method="getSingleRowNoParams" result="Pass" time="0.009" /><test name="FSharp.Data.CreateCommandTest.connection is properly disposed" type="FSharp.Data.CreateCommandTest" method="connection is properly disposed" result="Pass" time="0.007" /><test name="FSharp.Data.CreateCommandTest.CreareDynamicRecords" type="FSharp.Data.CreateCommandTest" method="CreareDynamicRecords" result="Pass" time="0.009" /><test name="FSharp.Data.CreateCommandTest.Runtime column names" type="FSharp.Data.CreateCommandTest" method="Runtime column names" result="Pass" time="0.004" /><test name="FSharp.Data.CreateCommandTest.optionalParams" type="FSharp.Data.CreateCommandTest" method="optionalParams" result="Pass" time="0.007" /><test name="FSharp.Data.CreateCommandTest.resultSetMapping" type="FSharp.Data.CreateCommandTest" method="resultSetMapping" result="Pass" time="0.021" /><test name="FSharp.Data.CreateCommandTest.getSequenceWithParams" type="FSharp.Data.CreateCommandTest" method="getSequenceWithParams" result="Pass" time="0.038" /><test name="FSharp.Data.CreateCommandTest.Fallback to metadata retrieval through FMTONLY" type="FSharp.Data.CreateCommandTest" method="Fallback to metadata retrieval through FMTONLY" result="Pass" time="0.003" /><test name="FSharp.Data.CreateCommandTest.udttAndTuplesOutput" type="FSharp.Data.CreateCommandTest" method="udttAndTuplesOutput" result="Pass" time="0.053" /></class><class time="0.127" name="FSharp.Data.SynonymsTests" total="3" passed="3" failed="0" skipped="0"><test name="FSharp.Data.SynonymsTests.TVFSynonym" type="FSharp.Data.SynonymsTests" method="TVFSynonym" result="Pass" time="0.038" /><test name="FSharp.Data.SynonymsTests.TableSynonym" type="FSharp.Data.SynonymsTests" method="TableSynonym" result="Pass" time="0.005" /><test name="FSharp.Data.SynonymsTests.SPSynonym" type="FSharp.Data.SynonymsTests" method="SPSynonym" result="Pass" time="0.084" /></class><class time="0.038" name="FSharp.Data.EnumTests" total="9" passed="9" failed="0" skipped="0"><test name="FSharp.Data.EnumTests.SingleColumn" type="FSharp.Data.EnumTests" method="SingleColumn" result="Pass" time="0.005" /><test name="FSharp.Data.EnumTests.PatternMatchingOn" type="FSharp.Data.EnumTests" method="PatternMatchingOn" result="Pass" time="0.003" /><test name="FSharp.Data.EnumTests.parse" type="FSharp.Data.EnumTests" method="parse" result="Pass" time="0.003" /><test name="FSharp.Data.EnumTests.tinyIntMapping" type="FSharp.Data.EnumTests" method="tinyIntMapping" result="Pass" time="0.000" /><test name="FSharp.Data.EnumTests.Name" type="FSharp.Data.EnumTests" method="Name" result="Pass" time="0.001" /><test name="FSharp.Data.EnumTests.ConvertUsdToGbp" type="FSharp.Data.EnumTests" method="ConvertUsdToGbp" result="Pass" time="0.010" /><test name="FSharp.Data.EnumTests.ProductWeightAndSizeUnitsOfMeasure" type="FSharp.Data.EnumTests" method="ProductWeightAndSizeUnitsOfMeasure" result="Pass" time="0.014" /><test name="FSharp.Data.EnumTests.MoreThan2ColumnReturnsCorrectTuples" type="FSharp.Data.EnumTests" method="MoreThan2ColumnReturnsCorrectTuples" result="Pass" time="0.001" /><test name="FSharp.Data.EnumTests.Enums" type="FSharp.Data.EnumTests" method="Enums" result="Pass" time="0.001" /></class><class time="0.374" name="FSharp.Data.DynamicRecordTests" total="11" passed="11" failed="0" skipped="0"><test name="FSharp.Data.DynamicRecordTests.TryGetMember succeeds" type="FSharp.Data.DynamicRecordTests" method="TryGetMember succeeds" result="Pass" time="0.002" /><test name="FSharp.Data.DynamicRecordTests.Not equal of different size" type="FSharp.Data.DynamicRecordTests" method="Not equal of different size" result="Pass" time="0.000" /><test name="FSharp.Data.DynamicRecordTests.ToString : Nulls to Nones" type="FSharp.Data.DynamicRecordTests" method="ToString : Nulls to Nones" result="Pass" time="0.002" /><test name="FSharp.Data.DynamicRecordTests.Not equal of different type" type="FSharp.Data.DynamicRecordTests" method="Not equal of different type" result="Pass" time="0.000" /><test name="FSharp.Data.DynamicRecordTests.GetHashCode is same when equal" type="FSharp.Data.DynamicRecordTests" method="GetHashCode is same when equal" result="Pass" time="0.007" /><test name="FSharp.Data.DynamicRecordTests.JSON serialize" type="FSharp.Data.DynamicRecordTests" method="JSON serialize" result="Pass" time="0.362" /><test name="FSharp.Data.DynamicRecordTests.ToString" type="FSharp.Data.DynamicRecordTests" method="ToString" result="Pass" time="0.001" /><test name="FSharp.Data.DynamicRecordTests.Not equal with different keys" type="FSharp.Data.DynamicRecordTests" method="Not equal with different keys" result="Pass" time="0.000" /><test name="FSharp.Data.DynamicRecordTests.Not equal with different values" type="FSharp.Data.DynamicRecordTests" method="Not equal with different values" result="Pass" time="0.000" /><test name="FSharp.Data.DynamicRecordTests.Equal" type="FSharp.Data.DynamicRecordTests" method="Equal" result="Pass" time="0.000" /><test name="FSharp.Data.DynamicRecordTests.TryGetMember fails" type="FSharp.Data.DynamicRecordTests" method="TryGetMember fails" result="Pass" time="0.000" /></class><class time="0.034" name="FSharp.Data.SpReturnValueTests" total="4" passed="4" failed="0" skipped="0"><test name="FSharp.Data.SpReturnValueTests.AddRef" type="FSharp.Data.SpReturnValueTests" method="AddRef" result="Pass" time="0.010" /><test name="FSharp.Data.SpReturnValueTests.BinaryOutput" type="FSharp.Data.SpReturnValueTests" method="BinaryOutput" result="Pass" time="0.005" /><test name="FSharp.Data.SpReturnValueTests.ResultSetAndOutParam" type="FSharp.Data.SpReturnValueTests" method="ResultSetAndOutParam" result="Pass" time="0.014" /><test name="FSharp.Data.SpReturnValueTests.TimestampOutput" type="FSharp.Data.SpReturnValueTests" method="TimestampOutput" result="Pass" time="0.005" /></class><class time="0.343" name="FSharp.Data.ProgrammabilityTest" total="18" passed="18" failed="0" skipped="0"><test name="FSharp.Data.ProgrammabilityTest.SpWithParamOfTvpWithNullableColumns" type="FSharp.Data.ProgrammabilityTest" method="SpWithParamOfTvpWithNullableColumns" result="Pass" time="0.010" /><test name="FSharp.Data.ProgrammabilityTest.ConnectionObject" type="FSharp.Data.ProgrammabilityTest" method="ConnectionObject" result="Pass" time="0.008" /><test name="FSharp.Data.ProgrammabilityTest.TableValuedFunction" type="FSharp.Data.ProgrammabilityTest" method="TableValuedFunction" result="Pass" time="0.008" /><test name="FSharp.Data.ProgrammabilityTest.routineCommandTypeTag" type="FSharp.Data.ProgrammabilityTest" method="routineCommandTypeTag" result="Pass" time="0.000" /><test name="FSharp.Data.ProgrammabilityTest.update table should work when names connection string from design time is not available at the runtime but is substituded with a literal" type="FSharp.Data.ProgrammabilityTest" method="update table should work when names connection string from design time is not available at the runtime but is substituded with a literal" result="Pass" time="0.007" /><test name="FSharp.Data.ProgrammabilityTest.SpAndTVPinDiffSchema" type="FSharp.Data.ProgrammabilityTest" method="SpAndTVPinDiffSchema" result="Pass" time="0.009" /><test name="FSharp.Data.ProgrammabilityTest.ScalarValuedFunction" type="FSharp.Data.ProgrammabilityTest" method="ScalarValuedFunction" result="Pass" time="0.040" /><test name="FSharp.Data.ProgrammabilityTest.StaticCreateMethod" type="FSharp.Data.ProgrammabilityTest" method="StaticCreateMethod" result="Pass" time="0.036" /><test name="FSharp.Data.ProgrammabilityTest.OutParam" type="FSharp.Data.ProgrammabilityTest" method="OutParam" result="Pass" time="0.006" /><test name="FSharp.Data.ProgrammabilityTest.FunctionWithParamOfValueTypeWithNullDefault" type="FSharp.Data.ProgrammabilityTest" method="FunctionWithParamOfValueTypeWithNullDefault" result="Pass" time="0.013" /><test name="FSharp.Data.ProgrammabilityTest.PassingImageAsParamDoesntGetCut" type="FSharp.Data.ProgrammabilityTest" method="PassingImageAsParamDoesntGetCut" result="Pass" time="0.026" /><test name="FSharp.Data.ProgrammabilityTest.honors result type parameter: datatable" type="FSharp.Data.ProgrammabilityTest" method="honors result type parameter: datatable" result="Pass" time="0.007" /><test name="FSharp.Data.ProgrammabilityTest.no bad error message when db is changed before table update " type="FSharp.Data.ProgrammabilityTest" method="no bad error message when db is changed before table update " result="Pass" time="0.114" /><test name="FSharp.Data.ProgrammabilityTest.SpWithParamOfRefTypeWithNullDefault" type="FSharp.Data.ProgrammabilityTest" method="SpWithParamOfRefTypeWithNullDefault" result="Pass" time="0.015" /><test name="FSharp.Data.ProgrammabilityTest.SpWithParamOfTvpWithNullableColumns2" type="FSharp.Data.ProgrammabilityTest" method="SpWithParamOfTvpWithNullableColumns2" result="Pass" time="0.008" /><test name="FSharp.Data.ProgrammabilityTest.localTransactionCreateAndSingleton" type="FSharp.Data.ProgrammabilityTest" method="localTransactionCreateAndSingleton" result="Pass" time="0.016" /><test name="FSharp.Data.ProgrammabilityTest.localTransactionCtor" type="FSharp.Data.ProgrammabilityTest" method="localTransactionCtor" result="Pass" time="0.012" /><test name="FSharp.Data.ProgrammabilityTest.ResultSetAndOutParam" type="FSharp.Data.ProgrammabilityTest" method="ResultSetAndOutParam" result="Pass" time="0.008" /></class><class time="0.069" name="FSharp.Data.TVPTests" total="12" passed="10" failed="0" skipped="2"><test name="FSharp.Data.TVPTests.InputIsEnumeratedExactlyOnce" type="FSharp.Data.TVPTests" method="InputIsEnumeratedExactlyOnce" result="Skip"><reason><message>Flucky</message></reason></test><test name="FSharp.Data.TVPTests.SprocTupleValue works with empty table" type="FSharp.Data.TVPTests" method="SprocTupleValue works with empty table" result="Pass" time="0.006" /><test name="FSharp.Data.TVPTests.UsingMappedTVPInQuery" type="FSharp.Data.TVPTests" method="UsingMappedTVPInQuery" result="Pass" time="0.007"><output>Data Source=.;Initial Catalog=AdventureWorks2012;Integrated Security=True
</output></test><test name="FSharp.Data.TVPTests.ReuseTVPTypeForDynamicADONET" type="FSharp.Data.TVPTests" method="ReuseTVPTypeForDynamicADONET" result="Pass" time="0.004" /><test name="FSharp.Data.TVPTests.NullableColumn" type="FSharp.Data.TVPTests" method="NullableColumn" result="Pass" time="0.006" /><test name="FSharp.Data.TVPTests.tvpSqlParamCleanUp" type="FSharp.Data.TVPTests" method="tvpSqlParamCleanUp" result="Pass" time="0.008" /><test name="FSharp.Data.TVPTests.UsingTVPInQuery" type="FSharp.Data.TVPTests" method="UsingTVPInQuery" result="Skip"><reason><message>Fails at runtime :(</message></reason></test><test name="FSharp.Data.TVPTests.Basic" type="FSharp.Data.TVPTests" method="Basic" result="Pass" time="0.006" /><test name="FSharp.Data.TVPTests.SingleColumn" type="FSharp.Data.TVPTests" method="SingleColumn" result="Pass" time="0.006" /><test name="FSharp.Data.TVPTests.TwoTVPParameterOfSameUDTT" type="FSharp.Data.TVPTests" method="TwoTVPParameterOfSameUDTT" result="Pass" time="0.015" /><test name="FSharp.Data.TVPTests.SprocTupleValue" type="FSharp.Data.TVPTests" method="SprocTupleValue" result="Pass" time="0.007" /><test name="FSharp.Data.TVPTests.TableValuedTupleWithOptionalParams" type="FSharp.Data.TVPTests" method="TableValuedTupleWithOptionalParams" result="Pass" time="0.004" /></class><class time="0.006" name="FSharp.Data.ResultTypeTests" total="1" passed="1" failed="0" skipped="0"><test name="FSharp.Data.ResultTypeTests.ResultTypeReader" type="FSharp.Data.ResultTypeTests" method="ResultTypeReader" result="Pass" time="0.006" /></class><class time="0.124" name="FSharp.Data.TransactionTests" total="12" passed="12" failed="0" skipped="0"><test name="FSharp.Data.TransactionTests.doNotOpenConnectionOnObjectForAsyncNonQuery" type="FSharp.Data.TransactionTests" method="doNotOpenConnectionOnObjectForAsyncNonQuery" result="Pass" time="0.018" /><test name="FSharp.Data.TransactionTests.implicitAsync" type="FSharp.Data.TransactionTests" method="implicitAsync" result="Pass" time="0.034" /><test name="FSharp.Data.TransactionTests.local" type="FSharp.Data.TransactionTests" method="local" result="Pass" time="0.014" /><test name="FSharp.Data.TransactionTests.notCloseExternalConnInCaseOfError" type="FSharp.Data.TransactionTests" method="notCloseExternalConnInCaseOfError" result="Pass" time="0.002" /><test name="FSharp.Data.TransactionTests.implicitAsyncNETBefore451" type="FSharp.Data.TransactionTests" method="implicitAsyncNETBefore451" result="Pass" time="0.014" /><test name="FSharp.Data.TransactionTests.notCloseExternalConnInCaseOfError2" type="FSharp.Data.TransactionTests" method="notCloseExternalConnInCaseOfError2" result="Pass" time="0.001" /><test name="FSharp.Data.TransactionTests.doNotOpenConnectionOnObjectForNonQuery" type="FSharp.Data.TransactionTests" method="doNotOpenConnectionOnObjectForNonQuery" result="Pass" time="0.001" /><test name="FSharp.Data.TransactionTests.implicit" type="FSharp.Data.TransactionTests" method="implicit" result="Pass" time="0.018" /><test name="FSharp.Data.TransactionTests.donNotOpenConnectionOnObject" type="FSharp.Data.TransactionTests" method="donNotOpenConnectionOnObject" result="Pass" time="0.001" /><test name="FSharp.Data.TransactionTests.implicitWithConnInstance" type="FSharp.Data.TransactionTests" method="implicitWithConnInstance" result="Pass" time="0.013" /><test name="FSharp.Data.TransactionTests.prematurelyOpenConnection" type="FSharp.Data.TransactionTests" method="prematurelyOpenConnection" result="Pass" time="0.004" /><test name="FSharp.Data.TransactionTests.Closing ConnectionStrings.AdventureWorks on complete" type="FSharp.Data.TransactionTests" method="Closing ConnectionStrings.AdventureWorks on complete" result="Pass" time="0.004" /></class><class time="0.028" name="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed" total="4" passed="4" failed="0" skipped="0"><test name="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed.WithUnboundDeclaration" type="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed" method="WithUnboundDeclaration" result="Pass" time="0.007" /><test name="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed.DynamicFiltering" type="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed" method="DynamicFiltering" result="Pass" time="0.007" /><test name="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed.Basic" type="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed" method="Basic" result="Pass" time="0.007" /><test name="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed.WithBoundDeclaration" type="FSharp.Data.The undeclared parameter 'X' is used more than once in the batch being analyzed" method="WithBoundDeclaration" result="Pass" time="0.007" /></class><class time="0.177" name="FSharp.Data.TypeProviderTest" total="20" passed="18" failed="0" skipped="2"><test name="FSharp.Data.TypeProviderTest.DeleteStatement" type="FSharp.Data.TypeProviderTest" method="DeleteStatement" result="Pass" time="0.003" /><test name="FSharp.Data.TypeProviderTest.ConcurrentReaders" type="FSharp.Data.TypeProviderTest" method="ConcurrentReaders" result="Skip"><reason><message>Thread safe execution is not supported yet</message></reason></test><test name="FSharp.Data.TypeProviderTest.CommandTimeout" type="FSharp.Data.TypeProviderTest" method="CommandTimeout" result="Skip"><reason><message>Don't execute for usual runs. Too slow.</message></reason></test><test name="FSharp.Data.TypeProviderTest.ExternalInstanceConnection" type="FSharp.Data.TypeProviderTest" method="ExternalInstanceConnection" result="Pass" time="0.002" /><test name="FSharp.Data.TypeProviderTest.emptyResultset" type="FSharp.Data.TypeProviderTest" method="emptyResultset" result="Pass" time="0.004" /><test name="FSharp.Data.TypeProviderTest.Setting the command timeout isn't overridden when giving ConnectionStrings.AdventureWorksNamed context" type="FSharp.Data.TypeProviderTest" method="Setting the command timeout isn't overridden when giving ConnectionStrings.AdventureWorksNamed context" result="Pass" time="0.005" /><test name="FSharp.Data.TypeProviderTest.ResultsetRuntimeVerificationLessThanExpectedColumns" type="FSharp.Data.TypeProviderTest" method="ResultsetRuntimeVerificationLessThanExpectedColumns" result="Pass" time="0.018" /><test name="FSharp.Data.TypeProviderTest.singleRowOption" type="FSharp.Data.TypeProviderTest" method="singleRowOption" result="Pass" time="0.018" /><test name="FSharp.Data.TypeProviderTest.asyncSinlgeColumn" type="FSharp.Data.TypeProviderTest" method="asyncSinlgeColumn" result="Pass" time="0.007" /><test name="FSharp.Data.TypeProviderTest.ResultsetRuntimeVerificationDiffColumnTypes" type="FSharp.Data.TypeProviderTest" method="ResultsetRuntimeVerificationDiffColumnTypes" result="Pass" time="0.034" /><test name="FSharp.Data.TypeProviderTest.asyncCustomRecord" type="FSharp.Data.TypeProviderTest" method="asyncCustomRecord" result="Pass" time="0.009" /><test name="FSharp.Data.TypeProviderTest.ConditionalQuery" type="FSharp.Data.TypeProviderTest" method="ConditionalQuery" result="Pass" time="0.007" /><test name="FSharp.Data.TypeProviderTest.ToTraceString double-quotes" type="FSharp.Data.TypeProviderTest" method="ToTraceString double-quotes" result="Pass" time="0.003" /><test name="FSharp.Data.TypeProviderTest.columnsShouldNotBeNull2" type="FSharp.Data.TypeProviderTest" method="columnsShouldNotBeNull2" result="Pass" time="0.005" /><test name="FSharp.Data.TypeProviderTest.ResultsetExtendedWithTrailingColumn" type="FSharp.Data.TypeProviderTest" method="ResultsetExtendedWithTrailingColumn" result="Pass" time="0.006" /><test name="FSharp.Data.TypeProviderTest.DynamicSql" type="FSharp.Data.TypeProviderTest" method="DynamicSql" result="Pass" time="0.027" /><test name="FSharp.Data.TypeProviderTest.ConnectionClose" type="FSharp.Data.TypeProviderTest" method="ConnectionClose" result="Pass" time="0.004" /><test name="FSharp.Data.TypeProviderTest.ToTraceString" type="FSharp.Data.TypeProviderTest" method="ToTraceString" result="Pass" time="0.005" /><test name="FSharp.Data.TypeProviderTest.TinyIntConversion" type="FSharp.Data.TypeProviderTest" method="TinyIntConversion" result="Pass" time="0.005" /><test name="FSharp.Data.TypeProviderTest.ToTraceString for CRUD" type="FSharp.Data.TypeProviderTest" method="ToTraceString for CRUD" result="Pass" time="0.015" /></class><class time="0.020" name="FSharp.Data.OptionalParamsTests" total="4" passed="4" failed="0" skipped="0"><test name="FSharp.Data.OptionalParamsTests.SkipYParam" type="FSharp.Data.OptionalParamsTests" method="SkipYParam" result="Pass" time="0.006" /><test name="FSharp.Data.OptionalParamsTests.NullableStringInputMandatoryParameter" type="FSharp.Data.OptionalParamsTests" method="NullableStringInputMandatoryParameter" result="Pass" time="0.004" /><test name="FSharp.Data.OptionalParamsTests.BothOptinalParamsSupplied" type="FSharp.Data.OptionalParamsTests" method="BothOptinalParamsSupplied" result="Pass" time="0.005" /><test name="FSharp.Data.OptionalParamsTests.NullableStringInputParameter" type="FSharp.Data.OptionalParamsTests" method="NullableStringInputParameter" result="Pass" time="0.005" /></class><class time="0.008" name="FSharp.Data.SqlClient.ConfigurationTests" total="1" passed="1" failed="0" skipped="0"><test name="FSharp.Data.SqlClient.ConfigurationTests.SqlFiles" type="FSharp.Data.SqlClient.ConfigurationTests" method="SqlFiles" result="Pass" time="0.008" /></class></assembly>